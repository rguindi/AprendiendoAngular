------------------INSTALACION

Instalaci칩n de Angular CLI:
npm install -g @angular/cli

Creacion del proyecto:
ng new mi-nuevo-proyecto-angular2

Lanzar app en http://localhost:4200/:
ng serve -o     //o par abrirse el navegador

si no estamos autorizados a abrir scripts abrimos powershell como administrador
Set-ExecutionPolicy Unrestricted

detener control + c


si no tenemos la carpeta node_modules
npm install

Crear componentes:
ng generate component nombreComponente
ng g c nombreComponente      //Es lo mismo      -s //estilo inline  -t //html inline

Instalar BootStrap
npm install bootstrap --save
npm install jquery --save
npm install popper.js --save
En angular.json:
 "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap-grid.min.css"
            ]


----------------------------EXPRESIONES Y BUCLES

{{expresiones}}

[disabled]="deshabilitar"     atributo valor de una variable
(click)="agregarPersona()"   evento entre ()
(input)="modificarTitulo($event)"

#referenciainput        En ts se recibe como HTMLInputElement

En Ts se puede utilizar para recuperarlo:
@ViewChild("referenciainput") nombreVariable: ElementRef;

Luego se recupera el value con:
this.nombreVariable.nativeElement

dos direcciones;
import { FormsModule  } from '@angular/forms';
  [(ngModel)] ="titulo"


  CONDICIONAL
import { CommonModule } from '@angular/common';

<p *ngIf="condicional; else sinPersona">{{ mensaje }}</p>
<ng-template #sinPersona>
<p>No se ha agredado ninguna persona</p>
</ng-template>


FOR
<div *ngFor="let persona of personas; let i = index">
        {{ i + 1 }} {{ persona.nombre }} {{ persona.apellido }}
      </div>






----------------PASO DE VARIABLES O DATOS ENTRE ELEMENTOS
INPUT  de padre a hijo

Padre html:
<app-persona *ngFor="let personaElemento of personas; let i = index"
  [persona] = "personaElemento"
  [indice] = "i"
  >

Hijo TS:
  @Input() persona!: Persona;
  @Input() indice!: number;


OUTPUT hijo a padre
hijo TS
export class FormularioComponent  {
  @Output() personaCreada = new EventEmitter<Persona>();
}
  this.personaCreada.emit(persona1);
Padre html
<app-formulario
(personaCreada)= "personaAgregada($event)"
></app-formulario>
padre TS
personaAgregada(persona: Persona){
  this.personas.push(persona);
}


-------------INJECTION
    constructor(private logginService:LogginService){}
@Injectable()  Para agregar una injecci칩n dentro de otra

Acordarse en app.module para que sea accesible desde toda la aplicaci칩n
  providers: [LogginService, PersonasService],



  ---------------ROutinG
  ng g module app-routing

  Se a침aden las rutas:
  const routes: Routes = [

  {path: '', component: PersonasComponent},
  {path:'personas', component: PersonasComponent},
  {path:'personas/agregar', component: FormularioComponent},
  {path:'personas/:id', component: FormularioComponent},
]

y se indica en el componente principal que se funciona con rutas

  <router-outlet></router-outlet>

  Tambien :
      <a [routerLink]="['/personas', indice]">
            {{ persona.nombre }} {{ persona.apellido }}
          </a>